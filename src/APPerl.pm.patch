--- /home/charlotte/cpan/lib/perl5/Perl/Dist/APPerl.pm~2022-12-16.08	2022-12-16 08:58:00.146904800 -0600
+++ /home/charlotte/cpan/lib/perl5/Perl/Dist/APPerl.pm~2023-01-15.01	2023-01-15 01:45:52.368733400 -0600
@@ -10,6 +10,7 @@
 use File::Basename qw(basename dirname);
 use File::Copy qw(copy move cp);
 use FindBin qw();
+use Fcntl qw(SEEK_SET);
 use Getopt::Long qw(GetOptionsFromArray);
 Getopt::Long::Configure qw(gnu_getopt);
 
@@ -693,10 +694,10 @@
             cosmo_id => '9c5a7795add7add5a214afce27d896084e0861c5',
             dest => 'perl-small-vista.com',
         },
-        'full' => { desc => 'moving target: full', base => 'v5.36.0-full-v0.1.0' },
-        'full-vista' => { desc => 'moving target: full for vista', base => 'v5.36.0-full-v0.1.0-vista' },
-        'small' => { desc => 'moving target: small', base => 'v5.36.0-small-v0.1.0' },
-        'small-vista' => { desc => 'moving target: small for vista', base => 'v5.36.0-small-v0.1.0-vista' },
+        'full' => { desc => 'moving target: full', base => 'v5.36.0-full-v0.1.0', perl_id => '9fdd50f323c92d465011c9f0857819edcc41be28', cosmo_id => 'eb69a42863ef602a951249b801ceed5f74cbb11c' },
+        'full-vista' => { desc => 'moving target: full for vista', base => 'v5.36.0-full-v0.1.0-vista', perl_id => '9fdd50f323c92d465011c9f0857819edcc41be28' },
+        'small' => { desc => 'moving target: small', base => 'v5.36.0-small-v0.1.0', perl_id => '9fdd50f323c92d465011c9f0857819edcc41be28', cosmo_id => 'eb69a42863ef602a951249b801ceed5f74cbb11c' },
+        'small-vista' => { desc => 'moving target: small for vista', base => 'v5.36.0-small-v0.1.0-vista', perl_id => '9fdd50f323c92d465011c9f0857819edcc41be28' },
         # development configs
         dontuse_threads => {
             desc => "not recommended, threaded build is buggy",
@@ -991,6 +992,7 @@
     my $UserProjectConfig = _load_valid_user_project_config_with_default($Configs) or die "cannot Build without valid UserProjectConfig";
     my $CurAPPerlName = $UserProjectConfig->{current_apperl};
     my $itemconfig = _load_apperl_config($Configs->{apperl_configs}, $CurAPPerlName);
+    my $startdir = abs_path('./');
 
     my $PERL_APE;
     my @perl_config_cmd;
@@ -1026,8 +1028,8 @@
     $PREFIX_NOZIP =~ s/^\/zip\/*//;
     my $PERL_VERSION = _cmdoutput_or_die(@perl_config_cmd, '-e', 'use Config; print $Config{version}');
     my $PERL_ARCHNAME = _cmdoutput_or_die(@perl_config_cmd, '-e', 'use Config; print $Config{archname}');
+    my $PERL_CC = _cmdoutput_or_die(@perl_config_cmd, '-e', 'use Config; print $Config{cc}');
     my @zipfiles = map { "$PREFIX_NOZIP"._fix_bases($_, $PERL_VERSION, $PERL_ARCHNAME) } @{$itemconfig->{MANIFEST}};
-    print STDERR Dumper(@zipfiles);
     my $ZIP_ROOT = "$TEMPDIR/zip";
 
     # install cosmo perl if this isn't a nobuild config
@@ -1044,21 +1046,88 @@
     # pack
     my $APPNAME = basename($PERL_APE);
     my $APPPATH = "$TEMPDIR/$APPNAME";
-    print "cp $PERL_APE $APPPATH\n";
-    copy($PERL_APE, $APPPATH) or die "copy failed: $!";
-    print "chmod 755 $APPPATH\n";
-    chmod(0755, $APPPATH) or die $!;
-    if((! exists $UserProjectConfig->{nobuild_perl_bin}) || scalar(keys %{$itemconfig->{zip_extra_files}})) {
-        print "cd $ZIP_ROOT\n";
-        chdir($ZIP_ROOT) or die "failed to enter ziproot";
-        foreach my $destkey (keys %{$itemconfig->{zip_extra_files}}) {
-            my $dest = _fix_bases($destkey, $PERL_VERSION, $PERL_ARCHNAME);
-            foreach my $file (@{$itemconfig->{zip_extra_files}{$destkey}}) {
-                _copy_recursive($file, $dest);
+    my $packAPE = sub {
+        print "cp $PERL_APE $APPPATH\n";
+        copy($PERL_APE, $APPPATH) or die "copy failed: $!";
+        print "chmod 755 $APPPATH\n";
+        chmod(0755, $APPPATH) or die $!;
+        if((! exists $UserProjectConfig->{nobuild_perl_bin}) || scalar(keys %{$itemconfig->{zip_extra_files}})) {
+            print "cd $ZIP_ROOT\n";
+            chdir($ZIP_ROOT) or die "failed to enter ziproot";
+            foreach my $destkey (keys %{$itemconfig->{zip_extra_files}}) {
+                my $dest = _fix_bases($destkey, $PERL_VERSION, $PERL_ARCHNAME);
+                foreach my $file (@{$itemconfig->{zip_extra_files}{$destkey}}) {
+                    _copy_recursive($file, $dest);
+                }
             }
+            _command_or_die($zippath // _find_zip(), '-r', $APPPATH, @zipfiles);
         }
-        _command_or_die($zippath // _find_zip(), '-r', $APPPATH, @zipfiles);
+    };
+    $packAPE->();
+
+
+    # install modules
+    if(exists $itemconfig->{install_modules}) {
+        my $perlman1 = "$TEMPDIR$PERL_PREFIX/man/man1";
+        my $perlman3 = "$TEMPDIR$PERL_PREFIX/man/man3";
+        my $perlbin = "$TEMPDIR$PERL_PREFIX/bin";
+        my $perllib = "$TEMPDIR$PERL_PREFIX/lib/perl5/$PERL_VERSION";
+        my $perlarchlib = "$perllib/$PERL_ARCHNAME";
+        my $perlinc = "$perlarchlib/CORE";
+        foreach my $module (@{$itemconfig->{install_modules}}) {
+            print "cd $startdir/$module\n";
+            chdir("$startdir/$module") or die "Failed to enter module dir";
+            my $fixprefix = sub {
+                my ($file) = @_;
+                open(my $fh, '+<', $file) or die "$!";
+                my $buf = '';
+                while(my $line = <$fh>) {
+                    $line =~ s/ $PERL_PREFIX/ $TEMPDIR$PERL_PREFIX/g;
+                    $buf .= $line;
+                }
+                seek($fh, 0, SEEK_SET) or die "$!";
+                print $fh $buf;
+                truncate($fh, tell($fh)) or die "$!";
+            };
+            # build
+            _command_or_die($APPPATH, 'Makefile.PL', "PERL_INC=$perlinc", "PERL_LIB=$perllib", "PERL_ARCHLIB=$perlarchlib", "MAP_TARGET=perl.elf", "INSTALLDIRS=perl",
+                "INSTALLARCHLIB=$perlarchlib",
+                "INSTALLPRIVLIB=$perllib",
+                "INSTALLBIN=$perlbin",
+                "INSTALLSCRIPT=$perlbin",
+                "INSTALLMAN1DIR=$perlman1",
+                "INSTALLMAN3DIR$perlman3"
+            );
+            $fixprefix->('Makefile');
+            _command_or_die('make');
+            # install into the src tree
+            _command_or_die('make', 'install');
+            # build a new perl binary and install
+            _command_or_die('make', 'Makefile.aperl');
+            $fixprefix->('Makefile.aperl');
+            _command_or_die('make', '-f', 'Makefile.aperl', 'perl.elf');
+            _command_or_die(dirname($PERL_CC)."/x86_64-linux-musl-objcopy", '-S', '-O', 'binary', 'perl.elf', 'perl.com');
+            $PERL_APE = abs_path('./perl.com');
+            $packAPE->();
+        }
+    }
+
+    # patch default script
+    if(exists $itemconfig->{default_script}) {
+        length($itemconfig->{default_script}) <= 255 or die "default script path is too long";
+        open(my $fh, '+<:raw', $APPPATH) or die "$!";
+        my $fsize = (stat($fh))[7];
+        my $bread = read($fh, my $outdata, $fsize);
+        $bread && $bread == $fsize or die "failed to read full file $APPPATH";
+        my $sentinel = "APPERL_DEFAULT_SCRIPT";
+        my $sentinelpos = index($outdata, $sentinel);
+        $sentinelpos != -1 or die "Failed to find APPERL_DEFAULT_SCRIPT, is this an old APPerl binary?";
+        print "patching default script at " . ($sentinelpos+length($sentinel)+1) . "\n";
+        seek($fh, $sentinelpos+length($sentinel)+1, SEEK_SET) or die "$!";
+        print $fh $itemconfig->{default_script}."\0" or die "$!";
+        close($fh);
     }
+
     print "mv $APPPATH $OUTPUTDIR/perl.com\n";
     move($APPPATH, "$OUTPUTDIR/perl.com") or die "move failed: $!";
 
@@ -1384,6 +1453,7 @@
     my ($src, $dest) = @_;
     print "_copy_recursive $src $dest\n";
     if(-f $src) {
+        chmod 0755, $dest;
         copy($src, $dest) or die("Failed to copy $!");
     }
     elsif(-d $src) {
@@ -1637,15 +1707,21 @@
 
 You have embedded a script inside APPerl, however running it is a
 little awkward. What if you could run it by the name of the script?
+APPerl has argv[0] script execution, enabling the following:
 
   ln -s perl.com hello
   ./hello
 
-More details on the argv[0] script execution is in L</USAGE>. Now,
-what about Perl modules? Perl modules can be packed in the same way,
-but to ease setting the correct directory to packing them into, the
-magic prefix __perllib__ can be used in the destination. Note, you may
-have to add items to the MANIFEST key if the MANIFEST isn't set
+Now, you may still wish for your application to be run, even if the
+executable is renamed. Add C<default_script> to your config to set a
+fallback script:
+
+  "default_script" : "/zip/bin/hello"
+
+Now, what about Perl modules? Perl modules can be packed in the same
+way, but to ease setting the correct directory to packing them into,
+the magic prefix __perllib__ can be used in the destination. Note, you
+may have to add items to the MANIFEST key if the MANIFEST isn't set
 permissively already.
 
   "zip_extra_files" : { "__perllib__/Your" : ["Module.pm"] }
